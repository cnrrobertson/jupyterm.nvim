==============================================================================
------------------------------------------------------------------------------
*jupyterm* Neovim Jupyter kernel manager
*Jupyterm*

MIT License Copyright (c) 2025 Connor Robertson

===========================================================================

Key features:
- Start, interrupt, and shutdown Jupyter kernels effortlessly.
- Send code blocks or selections to a selected kernel.
- View Jupyter outputs in REPL buffers or as virtual text inline with your code.
- Supports multiple languages via their respective Jupyter kernels (Python, R, Julia, etc.)

# Setup ~

This plugin needs to be setup with |Jupyterm.setup|. It will create a global
Lua table `Jupyterm` which contains the `kernels`.

See |Jupyterm.config| for available config settings.

# Usage ~

  1. Start a Kernel: Use the command `:Jupyter start <kernel> [<cwd> <kernel_name>]`.  Replace `<kernel>` with a number/name for the kernel. Optionally, choose the working directory of the kernel with `<cwd>` and choose the language kernel with `<kernel_name>` (e.g., `python3`, `ir`, `ijulia`). By default, Neovim's `cwd` and the `python3` kernel are used.

  2. Send Code: `:Jupyter execute <kernel>` will send the current line to the kernel. Visual selection then `:'<,'>Jupyter execute <kernel>` will send the selection to the kernel. Alternatively, send code directly via `:Jupyter execute <kernel> <code>`.  See the `lua` API in the help file for `send_line`, `send_visual`, `send_select`, and `send_file` from `require("jupyterm.execute")` to send the current line, visual selection, to a selected kernel, and the entire current buffer respectively.

  3. Manage Kernels: Use `:Jupyter status`, `:Jupyter interrupt`, `:Jupyter shutdown`, and `:Jupyter menu` to check the status, interrupt execution, shutdown a kernel, or view active kernels in an interactive popup menu.

  4. Output Display: Outputs will appear in a dedicated REPL buffer or inline, depending on your configuration (`jupyterm.config.inline_display`). You can also use `:Jupyter toggle_repl` and `:Jupyter toggle_text` to manage the REPL buffer and virtual text respectively. Use `:Jupyter toggle_text_here` to toggle individual inline outputs.

  5. REPL: After opening the REPL buffer with `:Jupyter toggle_repl`, the buffer may be edited as normal. Text inserted below the last `In [*]` in the buffer will be considered a new input. By default, hitting enter in normal mode will submit the input to the kernel. See the [REPL section](#repl) for more information on this buffer.

# User Commands ~

User commands are shown below. Optional arguments are marked with a `?`:

  Starts a Jupyter kernel.
  `:Jupyter start kernel cwd? kernel_name?`

  Shuts down a Jupyter kernel.
  `:Jupyter shutdown kernel`

  Checks the status of a Jupyter kernel.
  `:Jupyter status kernel`

  Interrupts a Jupyter kernel.
  `:Jupyter interrupt kernel`

  Executes code in a specified kernel.
  `:Jupyter execute kernel? code?`

  Toggles the Jupyter kernel menu.
  `:Jupyter menu`

  Toggles the REPL window for a kernel.
  `:Jupyter toggle_repl kernel? focus? full?`

  Toggles the display of virtual text outputs for a kernel.
  `:Jupyter toggle_text kernel?`

  Toggles virtual text output in the range under the cursor.
  `:Jupyter toggle_text_here kernel row?`

  Shows virtual text output in the range under the cursor in a popup window.
  `:Jupyter expand_text_here kernel row?`

Note that `kernel` generally refers to the kernel identifier in Neovim and not the `kernel_name` or the actual descriptor of a Jupyter kernel (e.g., `python3`, `ir`). Optional arguments can be omitted.

# REPL ~

The REPL (Read-Eval-Print Loop) buffer provides an interactive environment for executing code and viewing results. This buffer can be shown using `:Jupyter toggle_repl`. Text inserted *after* the last `In [*]` marker in this buffer is treated as a new input cell. Pressing Enter in normal mode will submit this input to the kernel.

The REPL buffer automatically refreshes to display updates from long-running computations. However, this automatic refresh pauses when you begin typing new input, preventing accidental overwriting.

To manage the length of the buffer and optimize refresh speed, the buffer's display is limited to a certain number of lines (configurable via `jupyterm.config.ui.max_displayed_lines`).  This prevents performance slowdowns from extremely large outputs. If needed, you can view the complete output by using the `full` argument of `Jupyter toggle_repl` or see the `lua` API in the help file.

The REPL buffer also comes with default keybindings for convenience:

   *<CR>*: Submits the current input to the kernel.
   *<Esc>*: Refreshes the display, showing the most current kernel output.
   *[c*: Jumps to the previous display block.
   *]c*: Jumps to the next display block.
   *<C-c>*: Interrupts the currently running kernel.
   *<C-q>*: Shuts down the currently running kernel.

These keybindings make interacting with the REPL buffer intuitive and efficient.

# Highlight groups ~

* `JupytermInText` - Titles of input blocks in REPL buffer
* `JupytermOutText` - Titles of output blocks in REPL buffer
* `JupytermVirtQueued` - Color of virtual text when queued for execution
* `JupytermVirtComputing` - Color of virtual text when currently being executed
* `JupytermVirtCompleted` - Color of virtual text when execution completed
* `JupytermVirtError` - Color of virtual text when execution errored

------------------------------------------------------------------------------
                                                              *Jupyterm.setup()*
                            `Jupyterm.setup`({opts})
Update config, setup namespaces, highlight groups, user commands, autocmds, and timers
Parameters ~
{opts} `(table)` of options to override the default config


==============================================================================
------------------------------------------------------------------------------
                                                               *Jupyterm.config*
                               `Jupyterm.config`

Class ~
{config}
Fields ~
{default_kernel} `(string)`
{focus_on_show} `(boolean)`
{show_on_send} `(boolean)`
{focus_on_send} `(boolean)`
{inline_display} `(boolean)`
{output_refresh} `(table)`
{ui} `(table)`

Default values:
>lua
  Jupyterm.config = {
    -- The default Jupyter kernel to use
    default_kernel = "python3",
    -- Focus the REPL window when showing
    focus_on_show = true,
    -- Show the REPL window when sending text to it
    show_on_send = false,
    -- Focus the REPL window when sending text to it
    focus_on_send = false,
    -- Show outputs inline as virtual text when sending text
    inline_display = true,
    -- Automatic refreshing of REPL window and virtual text
    output_refresh = {
      enabled = true,
      delay = 2000,
    },
    -- UI options for the REPL window and the menu
    ui = {
      wait_str = "Computing...",
      queue_str = "Queued",
      repl = {
        format = "split",
        config = {
          relative = "editor",
          position = "right",
          size = "40%",
          enter = false
        },
      },
      max_displayed_lines = 500,
      menu = {
        keys = {
          focus_next = {"j", "<Down>", "<Tab>"},
          focus_prev = {"k", "<Up>", "<S-Tab>"},
          submit = {"<CR>", "<Space>"},
          close = {"<Esc>", "<C-c>", "q"},
          new = {"n"},
          destroy = {"d"},
          toggle = {"w"},
        },
        opts = {
          relative = "editor",
          position = '50%',
          size = '50%',
          zindex = 500
        }
      }
    }
  }
<

==============================================================================
------------------------------------------------------------------------------
                                                       *Jupyterm.manage_kernels*
                           `Jupyterm.manage_kernels`

------------------------------------------------------------------------------
                                                *manage_kernels.select_kernel()*
                        `manage_kernels.select_kernel`()
Selects a kernel from the available kernels.
Return ~
`(string)` `(optional)`

------------------------------------------------------------------------------
                                                 *manage_kernels.start_kernel()*
         `manage_kernels.start_kernel`({kernel}, {cwd}, {kernel_name})
Starts a Jupyter kernel.
Parameters ~
{kernel} `(string?)`
{cwd} `(string?)`
{kernel_name} `(string?)`

------------------------------------------------------------------------------
                                              *manage_kernels.shutdown_kernel()*
                   `manage_kernels.shutdown_kernel`({kernel})
Shuts down a Jupyter kernel.
Parameters ~
{kernel} `(string?)`

------------------------------------------------------------------------------
                                             *manage_kernels.interrupt_kernel()*
                  `manage_kernels.interrupt_kernel`({kernel})
Interrupts a Jupyter kernel.
Parameters ~
{kernel} `(string?)`

------------------------------------------------------------------------------
                                          *manage_kernels.check_kernel_status()*
                 `manage_kernels.check_kernel_status`({kernel})
Checks the status of a Jupyter kernel.
Parameters ~
{kernel} `(string?)`


==============================================================================
------------------------------------------------------------------------------
                                                              *Jupyterm.execute*
                               `Jupyterm.execute`

------------------------------------------------------------------------------
                                                                *execute.send()*
                        `execute.send`({kernel}, {code})
Sends code to a Jupyter kernel and updates the REPL buffer.
Parameters ~
{kernel} `(string)` The kernel to send the code to.
{code} `(string)` The code to send.

------------------------------------------------------------------------------
                                                  *execute.send_display_block()*
                         `execute.send_display_block`()
Sends current repl block of code to a Jupyter kernel.

------------------------------------------------------------------------------
                                                         *execute.send_select()*
                     `execute.send_select`({kernel}, {cmd})
Sends code to a selected kernel.
Parameters ~
{kernel} `(string?)`
{cmd} `(string)`

------------------------------------------------------------------------------
                                                           *execute.send_line()*
                         `execute.send_line`({kernel})
Sends the current line to a Jupyter kernel.
Parameters ~
{kernel} `(string?)`

------------------------------------------------------------------------------
                                                          *execute.send_lines()*
            `execute.send_lines`({kernel}, {start_line}, {end_line})
Sends multiple lines of code to a Jupyter kernel.
Parameters ~
{kernel} `(string?)`
{start_line} `(integer)`
{end_line} `(integer)`

------------------------------------------------------------------------------
                                                         *execute.send_visual()*
                        `execute.send_visual`({kernel})
Sends the visually selected code to a Jupyter kernel.
Parameters ~
{kernel} `(string?)`

------------------------------------------------------------------------------
                                                           *execute.send_file()*
                         `execute.send_file`({kernel})
Sends the entire file to a Jupyter kernel.
Parameters ~
{kernel} `(string?)`


==============================================================================
------------------------------------------------------------------------------
                                                              *Jupyterm.display*
                               `Jupyterm.display`

------------------------------------------------------------------------------
                                                     *display.refresh_windows()*
                          `display.refresh_windows`()
Refreshes all repl windows.

------------------------------------------------------------------------------
                                                   *display.refresh_virt_text()*
                         `display.refresh_virt_text`()
Refreshes all virtual text.

------------------------------------------------------------------------------
                                                         *display.toggle_repl()*
                `display.toggle_repl`({kernel}, {focus}, {full})
Toggles the repl buffer.
Parameters ~
{kernel} `(string?)`
{focus} `(boolean?)` whether to focus the repl window
{full} `(boolean?)` whether to display the full output

------------------------------------------------------------------------------
                                                           *display.hide_repl()*
                         `display.hide_repl`({kernel})
Hides the repl buffer.
Parameters ~
{kernel} `(string?)`

------------------------------------------------------------------------------
                                                           *display.show_repl()*
                 `display.show_repl`({kernel}, {focus}, {full})
Shows the repl buffer.
Parameters ~
{kernel} `(string?)`
{focus} `(boolean?)` whether to focus the repl window
{full} `(boolean?)` whether to display the full output

------------------------------------------------------------------------------
                                                    *display.toggle_virt_text()*
                      `display.toggle_virt_text`({kernel})
Toggles virtual text.
Parameters ~
{kernel} `(string?)`

------------------------------------------------------------------------------
                                                  *display.show_all_virt_text()*
                     `display.show_all_virt_text`({kernel})
Shows all virtual text.
Parameters ~
{kernel} `(string)`

------------------------------------------------------------------------------
                                                  *display.hide_all_virt_text()*
                     `display.hide_all_virt_text`({kernel})
Hides all virtual text.
Parameters ~
{kernel} `(string)`

------------------------------------------------------------------------------
                                             *display.toggle_virt_text_at_row()*
               `display.toggle_virt_text_at_row`({kernel}, {row})
virtual text at row (or under cursor)
Parameters ~
{kernel} `(optional)` `(string)`
{row} `(optional)` `(integer)`

------------------------------------------------------------------------------
                                                    *display.expand_virt_text()*
                  `display.expand_virt_text`({kernel}, {row})
Expands virtual text into a popup.
Parameters ~
{kernel} `(optional)` `(string)`
{row} `(optional)` `(integer)`

------------------------------------------------------------------------------
                                               *display.scroll_repl_to_bottom()*
                   `display.scroll_repl_to_bottom`({kernel})
Scrolls the output to the bottom.
Parameters ~
{kernel} `(string)`

------------------------------------------------------------------------------
                                               *display.jump_display_block_up()*
                   `display.jump_display_block_up`({kernel})
Jumps to the previous display block.
Parameters ~
{kernel} `(string?)`

------------------------------------------------------------------------------
                                             *display.jump_display_block_down()*
                  `display.jump_display_block_down`({kernel})
Jumps to the next display block.
Parameters ~
{kernel} `(string?)`


==============================================================================
------------------------------------------------------------------------------
                                                                 *Jupyterm.menu*
                                `Jupyterm.menu`

------------------------------------------------------------------------------

------------------------------------------------------------------------------
                                                            *menu.toggle_menu()*
                              `menu.toggle_menu`()

Creates a menu with the given lines, keys, and on_submit function.

------------------------------------------------------------------------------
                                                              *menu.show_menu()*
                         `menu.show_menu`({on_submit})
Shows the Jupyter menu.
Parameters ~
{on_submit} `((fun(table): nil)?)` The function to call when an item is submitted.


 vim:tw=78:ts=8:noet:ft=help:norl: